dise√±o agil con TDD
voy par la pagina 36

codificar con t√©cnicas de XP (eXtreme Programming) , concretamente TDD.
y gestionar el proyecto con SCRUM.

la idea es que en cada interacion, no se este resolviendo defectos,
sino ir puliendo las cosas que ya funcionan.

voy pagina 39
voy pagina 45

las pantallas no re dise√±an al comienzo, sino al ginal, cuando los 
requisitos de negoicos ya se cumplen.
los requisitos son frases cortas en lenguaje natural que ejecuta una
maquina automaticamente, ya que tiene forma de test, con lo que se
sabe cuando se ha implementado.

si las pantallas se dise√±an primero, se contamina la logica del negocio
con la interpretacion que el dise√±ador pueda hacer de los requisitos y
corremos el riesgo de escribir un codigo sujeto a la UI en lugar de los
requisitos, lo cual lo hace dificil de modificar ante cambios futuros en
el negocio.
tanto la UI como el dise√±o de la la base de datos se hacen al final.

el orden correcto es :
1. Test de aceptacion
2. test de desarrollo que acabara en la capa de datos que pide las persistencia.

Que es Gherkin ?
Es un leguaje de texto que utiliza palabras claves given, when y then para escrbir
los requisitos del software.

Cucumber, lee e interpreta los archivos hechos en Gherkin con la extension .feacture
y ejecutas las pruebas unitarias.
TDD (Test Driven Development)  Desarrollo dirigido por pruebas
BDD (Behavior Driven Development) Desarrollo dirigido por Comportamiento 

DSL (Domain Specific Language) Lenguaje Especifico de Dominio

Playwright o Cypress, son herramientas para BDD que han hido remplazando de Cucumber.

Playwright es de microsoft 
Cypress esta enfocada al Front End (nada mas funciona para probar javaascrip y typescrip)
Serenity nos muestra informes mas completo del mercado, pero la curva de aprendizaje es compleja,
u utiliza el patron Screenplay .


voy pagina 51
Algoritmo TDD
1. escribir la especificacion del requisito (el ejemplo, el test)
2. implementar el codigo segun dicho ejemplo.
3. refactorizar para eliminar duplicidad y hacer mejoras.

voy pagina 57
"Working Effectively with Legacy Code‚Äù por Michael C. Feathers[
https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/

Desarrollo Dirigido por Test de Aceptacion (ATDD)
La lista de cada ejemplo(Test) de cada Historia de Usuario
Ejemplos de historias de usuarios:
Formulario de inscripcion
login en el sistema
reservar una habitacion
a√±adir un libro al carrito de la compra
pagar con tarjeta de credito
anota el dia festivo en el calendario
informe de los articulos mas vendidos

Deben ser Breves, concretas y algo estimables. Consiste en escuchar al cliente y ayudarlo a resumir
el requisito en una sola frase. Debe estar escrita en el vocabulario del negocio del cliente.

voy pagina 60

PABLA1048(937159).

‚öôÔ∏è Herramientas m√°s utilizadas para ATDD (2025)

Aqu√≠ tienes las m√°s reconocidas y usadas profesionalmente seg√∫n el ecosistema tecnol√≥gico:

üß∞ Herramienta	üí° Descripci√≥n	üåç Ecosistema / Lenguaje	üß™ Tipo de test
Cucumber	Permite escribir pruebas en lenguaje natural (Gherkin) que se enlazan con c√≥digo automatizado.	Java, JavaScript, Python, Ruby, .NET, Kotlin	Pruebas de aceptaci√≥n y BDD
Behave	Alternativa a Cucumber en Python.	Python	ATDD / BDD
SpecFlow	Versi√≥n de Cucumber para .NET. Integra con Visual Studio.	.NET (C#, F#)	ATDD / BDD
Robot Framework	Framework open source para ATDD y RPA. Muy usado en pruebas de aceptaci√≥n de sistemas grandes.	Python (pero soporta cualquier lenguaje v√≠a librer√≠as)	ATDD, UI, API
FitNesse	Wiki que permite definir y ejecutar pruebas de aceptaci√≥n colaborativamente.	Java / .NET	ATDD cl√°sico
JBehave	Framework precursor de Cucumber, enfocado en ATDD y BDD para Java.	Java	ATDD / BDD
Gauge (de ThoughtWorks)	Permite escribir especificaciones ejecutables en Markdown. Ligero y moderno.	Java, C#, JavaScript, Python	ATDD
üèÜ Recomendaci√≥n por ecosistema
Stack / Lenguaje	Herramienta recomendada	Motivo
Java / Spring Boot	‚úÖ Cucumber + JUnit 5	Soporte amplio, integraci√≥n con CI/CD, sintaxis Gherkin, documentaci√≥n viva.
.NET / C#	‚úÖ SpecFlow	Integraci√≥n nativa con Visual Studio y Azure DevOps.
Python	‚úÖ Behave o Robot Framework	Facilidad de uso, documentaci√≥n clara.
JavaScript / TypeScript / Node.js	‚úÖ Cucumber.js o Playwright Test + Gherkin plugin	Perfecto para frontends React / Angular.
Entornos heterog√©neos o RPA	‚úÖ Robot Framework	Vers√°til y potente para pruebas funcionales completas.

=====================

La herramienta m√°s utilizada y estandarizada globalmente para ATDD es Cucumber, especialmente en proyectos Java, JavaScript o .NET.
Si trabajas en entornos empresariales o con equipos √°giles, Cucumber (o su equivalente en tu stack, como SpecFlow o Behave) es la opci√≥n m√°s recomendable por:

Sintaxis legible (Gherkin).

Integraci√≥n con frameworks de testing (JUnit, NUnit, Jest, etc.).

Soporte CI/CD (Jenkins, GitHub Actions, Azure).

Documentaci√≥n ejecutable y colaborativa.

playwright + cucumber: configuraci√≥n inicial  JoanMedia ES

https://www.youtube.com/watch?v=Su08K9Rp8Uk

=== seg√∫n la opini√≥n del autor ======
no se recomienda hacer diagramas de clases antes que el c√≥digo, sino todo lo contrario, una vez teniendo el 
c√≥digo se utilizar una herramienta que genere el diagrama de clase, esto nos permite hechas un vistazo a 
las entidades de manera global.

la entidades emergen a base de un c√≥digo que a su vez se basa en los ejemplos pr√°cticos y ejecutables.

cada historia depende de muchas preguntas a cerca de los m√∫ltiples contexto que se pueden presentar.

¬øQu√© hace el sistema si el libro que se quiere a√±adir al carrito ya
est√° dentro de √©l?
¬øQu√© sucede si se ha agotado el libro en el almac√©n?
¬øSe le indica al usuario que el libro ha sido a√±adido al carrito de
la compra?

Por tanto, cada historia de
usuario tiene asociados uno o varios tests de aceptaci√≥n (ejemplos):

respuesta a las preguntas: 
A√±adir libro X en stock produce: ‚ÄúEl libro X ha sido a√±adido al carrito‚Äù
Libro X est√° contenido en el carrito
Libro X ya no est√° en cat√°logo de libros

el xUnit es el encargado de crear el codigo de prueba del test de aceptaci√≥n
realizado en cumcumber o tambi√©n puede ser Concordion.

Una de las claves de ATDD es justamente que nos permite centrarnos
en el qu√© y no en el c√≥mo.

Como saber si esta hecho o no ?

Que es test de regresi√≥n (Regression Test) ?
Un test de regresi√≥n (Regression Test) es una prueba automatizada o manual que se ejecuta despu√©s de realizar cambios en el c√≥digo (por ejemplo: una nueva funcionalidad, correcci√≥n de errores o refactorizaci√≥n) con el fin de asegurar que el comportamiento existente del sistema no se haya roto o alterado.

voy por la pagina 67


üß© 1Ô∏è‚É£ ATDD ‚Äî Acceptance Test-Driven Development

(Desarrollo Dirigido por Pruebas de Aceptaci√≥n)
üîπ Definici√≥n

ATDD es una metodolog√≠a √°gil donde desarrolladores, testers y el cliente (o negocio) colaboran antes de escribir c√≥digo para definir los criterios de aceptaci√≥n que determinan cu√°ndo una funcionalidad ser√° considerada ‚Äúterminada y aceptada‚Äù.

üîπ Ciclo de ATDD

Definir los criterios de aceptaci√≥n (en lenguaje natural)
Se describe el comportamiento esperado desde el punto de vista del usuario.

1. Automatizar esos criterios como pruebas (por ejemplo, en Gherkin con Cucumber).

2. Desarrollar el c√≥digo hasta que las pruebas pasen.

3. Refactorizar el c√≥digo y mantener las pruebas como parte de la regresi√≥n.

üß© 2Ô∏è‚É£ STDD ‚Äî Specification Test-Driven Development

(Desarrollo Dirigido por Pruebas de Especificaci√≥n)

üîπ Definici√≥n

STDD se centra en escribir pruebas que verifican el comportamiento esperado del sistema seg√∫n su especificaci√≥n t√©cnica o funcional.

A diferencia del ATDD (que se enfoca en la aceptaci√≥n por el cliente), STDD se enfoca en c√≥mo el sistema debe comportarse internamente, seg√∫n las reglas del negocio o la API.

üëâ En otras palabras:

En STDD defines las especificaciones del sistema en forma de pruebas antes de implementar la l√≥gica.

üîπ Ciclo de STDD

1. Analizas la especificaci√≥n t√©cnica (por ejemplo, un documento o contrato de API).

2. Escribes pruebas de especificaci√≥n (unitarias o de integraci√≥n) que reflejen ese comportamiento.

3. Desarrollas el c√≥digo hasta que todas las pruebas pasen.

3.4 el contexto es esencial.


voy paginas 67

libro recomenmdados para leer y descargar
si bien se podr√≠a escribir un libro sobre ello. Mike Cohn
escribi√≥ uno muy popular titulado User Stories Applied[5] que le recomiendo
encarecidamente leer. Menci√≥n especial tambi√©n al cap√≠tulo
sobre ATDD de Lasse Koskela en Test Driven[9] y los sucesivos, que
incluyen ejemplos sobre el framework FIT. Gojko Adzic[1] tiene un libro
basado en FitNesse y por supuesto cabe destacar su famoso libro sobre
Acceptance Testing[2]. Elisabeth Hendrickson, en colaboraci√≥n con
otros expertos de la talla de Brian Marick, public√≥ un paper que puede
leerse online3 e incluye ejemplos en el framework Robot.

Que se entiende por Test de Caja blanca y Test de caja negra ?

üß© 1Ô∏è‚É£ Test de Caja Negra (Black Box Testing)
üîπ Definici√≥n

En un test de caja negra, el tester no conoce la estructura interna del c√≥digo.
Solo se enfoca en las entradas (inputs) y salidas (outputs) del sistema.

üëâ En otras palabras:

Se prueba qu√© hace el sistema, no c√≥mo lo hace.

üß© 2Ô∏è‚É£ Test de Caja Blanca (White Box Testing)
üîπ Definici√≥n

En un test de caja blanca, el tester conoce la l√≥gica interna del c√≥digo y dise√±a pruebas para verificar su comportamiento interno, flujo, condiciones y estructuras de control.
üîπ Caracter√≠sticas

No se necesita conocer el c√≥digo fuente.

Se prueban funcionalidades completas (desde fuera).

Ideal para pruebas de aceptaci√≥n, integraci√≥n o sistema.

Se basa en los requisitos y criterios de aceptaci√≥n.

üëâ En otras palabras:

Se prueba c√≥mo funciona el sistema por dentro, no solo el resultado.

El objetivo es comprobar la correctitud l√≥gica del c√≥digo y asegurar que cada camino posible se ejecuta al menos una vez.

üîπ Caracter√≠sticas

Requiere conocer el c√≥digo fuente.

Se usa para tests unitarios y pruebas de integraci√≥n interna.

Se enfoca en ramas, condiciones, bucles y cobertura de c√≥digo.

Permite detectar errores l√≥gicos, ramas no ejecutadas o c√≥digo muerto.

pagina 71

Los tests de carga y de rendimiento son de aceptaci√≥n
cuando el cliente los considera requisitos de negocio. Si el cliente no
los requiere, ser√°n tests de desarrollo.


üß© 1Ô∏è‚É£ Definici√≥n de SUT (Subject Under Test)

SUT (Subject Under Test) significa literalmente ‚Äúel sujeto bajo prueba‚Äù.
Es el componente del sistema que est√°s probando directamente ‚Äî puede ser:

Una clase

Un m√©todo

Un m√≥dulo

Un servicio

O incluso un endpoint de una API

üëâ En otras palabras:

El SUT es el objeto principal sobre el que se ejecuta la prueba para verificar su comportamiento.

Hay herramientas
que permiten hacer lo mismo mediante programaci√≥n: nos dan una API
para seleccionar controles gr√°ficos, y accionarlos desde c√≥digo fuente,
comprobando el estado de la ejecuci√≥n con sentencias condicionales o
asertivas.
El propio Selenium lo permite. Una de las herramientas m√°s
populares es Watir8 para Ruby y sus versiones para otros lenguajes
de programaci√≥n (Watin para .Net). Para aplicaciones escritas con el
framework Django (Python), se utiliza el cliente web9. Para aplicaciones
de escritorio, hay frameworks espec√≠ficos como UIAutomation10 o
NUnitForms11 que tambi√©n permiten manipular la interfaz gr√°fica desde
c√≥digo.

Todo test
unitario debe ser:
At√≥mico
Independiente
Inocuo
R√°pido
Si no cumple estas premisas entonces no es un test unitario, aunque
se ejecute con una herramienta tipo xUnit.

Test unitarios
plataformas como Java (JUnit), .Net (NUnit),
Python (PyUnit), Ruby (Rubyunit), Perl (PerlUnit), C++ (CppUnit), etc.
Si aprendemos a trabajar con NUnit y PyUnit como veremos en este
libro, sabremos hacerlo con cualquier otro framework tipo xUnit porque
la filosof√≠a es siempre la misma. Adem√°s en Java, desde la versi√≥n 4 de
JUnit, se soportan las anotaciones por lo que NUnit y JUnit se parecen
todav√≠a m√°s.

Las tres partes del test: AAA
Un test tiene tres partes, que se identifican con las siglas AAA en
ingl√©s: Arrange (Preparar), Act (Actuar), Assert (Afirmar).

voy por la pagina 80




 






 
